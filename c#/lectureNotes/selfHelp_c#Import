In c#, files are structured using unique namespaces. Then use "using" keyword to import those names spaces into the main application file.

if the namespaces is long, you can use alias to shorten it. see below how this is done. Note they all the naming all stated with main application namespace.

using System;
using Utils = MyApp.Utilities;
using MoreUtils = MyApp.Utilities.MoreUtilities;

namespace MyApp
{
    class Program
    {
        static void Main(string[] args)
        {
            Console.WriteLine("Hello, World!");

            // Use aliases to differentiate between classes
            Utils.MyClass myClass1 = new Utils.MyClass();
            myClass1.PrintMessage();

            MoreUtils.MyClass myClass2 = new MoreUtils.MyClass();
            myClass2.PrintMessage();
        }
    }
}

Example of Class Name Conflict

Assume you have the following two classes with the same name but in different namespaces:

vbnet

MyConsoleApp/
│
├── Program.cs
├── Utilities/
│   ├── MyClass.cs
│   └── MoreUtilities/
│       └── MyClass.cs
└── MyConsoleApp.csproj

Utilities/MyClass.cs

csharp

namespace MyApp.Utilities
{
    public class MyClass
    {
        public void PrintMessage()
        {
            Console.WriteLine("Hello from MyClass in Utilities!");
        }
    }
}

Utilities/MoreUtilities/MyClass.cs

csharp

namespace MyApp.Utilities.MoreUtilities
{
    public class MyClass
    {
        public void PrintMessage()
        {
            Console.WriteLine("Hello from MyClass in MoreUtilities!");
        }
    }
}

Program.cs

To avoid ambiguity, you can use fully qualified names or alias the namespaces:

Using Fully Qualified Names:

csharp

using System;

namespace MyApp
{
    class Program
    {
        static void Main(string[] args)
        {
            Console.WriteLine("Hello, World!");

            // Use fully qualified names to differentiate between classes
            MyApp.Utilities.MyClass myClass1 = new MyApp.Utilities.MyClass();
            myClass1.PrintMessage();

            MyApp.Utilities.MoreUtilities.MyClass myClass2 = new MyApp.Utilities.MoreUtilities.MyClass();
            myClass2.PrintMessage();
        }
    }
}

Using Namespace Aliases:

csharp

using System;
using Utils = MyApp.Utilities;
using MoreUtils = MyApp.Utilities.MoreUtilities;

namespace MyApp
{
    class Program
    {
        static void Main(string[] args)
        {
            Console.WriteLine("Hello, World!");

            // Use aliases to differentiate between classes
            Utils.MyClass myClass1 = new Utils.MyClass();
            myClass1.PrintMessage();

            MoreUtils.MyClass myClass2 = new MoreUtils.MyClass();
            myClass2.PrintMessage();
        }
    }
}

Summary

    Multiple Files: Import the namespace that encompasses all the files. All files in a namespace are available after importing it.
    Class Name Conflicts: Use fully qualified names or namespace aliases to distinguish between classes with the same name in different namespaces.

NOTE:
Static Method: Belongs to the class, called without an instance.
Instance Method: Belongs to an object, called on an instance.
