Practice

Try the following exercises to practice using numeric data types:

    Exercise 1: Declare variables of each numeric type and initialize them with appropriate values. Print the values to the console.
    Exercise 2: Perform arithmetic operations (addition, subtraction, multiplication, division) on different numeric types and print the results.
    Exercise 3: Explore the range of each numeric type by assigning the maximum and minimum values and printing them to the console.

Concept Learning
-------------------
C# supports several numeric data types, each with different ranges and precision. They are classified into:

1) integer: They are grouped by signed & unsigned
	a) byte (8-bit unsigned)
	b) sbyte (8-bit signed)
	c) short (16-bit signed)
	d) ushort (16-bit unsigned)
	e) int (32-bit signed)
	f) uint (32-bit unsigned)
	g) long (64-bit signed)
	h) ulong (64-bit unsigned)

2) float:The are grouped into precisons
	a) float (single precision)
	b) double (double precision)

3) decimal: They are grouped into precise decimal used for financial & monemtary calculations where precision is crucial.

Summary:

    int: No suffix. default
    uint: U or u.
    long: L or l.
    ulong: UL, ul, LU, lu, uL, or Ul.
    float: F or f.
    double: No suffix (or D/d if you want to be explicit). default.
    decimal: M or m.
    
    number strings are coverted to desired numeric using "Convert.Toxxx" where xxx represent the numeric you want.

NOTE:
var: is used a to declare any datatype but is wise to explicityly state types for bigger number for readability.

const: decorator is used unmuntable variable.

Signed Integers: Can represent both positive and negative values.
Unsigned Integers: Only represent non-negative values, offering a larger positive range.

Boolean types: are used to set True or flase in our application.
e.g isMale = True; isMale=False;

Console.Write(): Use it when you want to continue writing on the same line.
Console.WriteLine(): Use it when you want to start a new line after writing.
